{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction HeroComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HeroComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \" Alias is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HeroComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const brand_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", brand_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", brand_r4.name, \" \");\n  }\n}\nfunction HeroComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \" Brand is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class HeroComponent {\n  constructor() {\n    this.fb = inject(FormBuilder);\n    this.heroesService = inject(HeroesService);\n    this.isSubmitted = false;\n    this.brands = [{\n      id: 1,\n      name: 'DC'\n    }, {\n      id: 2,\n      name: 'Marvel'\n    }];\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      alias: ['', Validators.required],\n      brands: ['', Validators.required]\n    });\n  }\n  trackByBrandId(index, item) {\n    return item.id;\n  }\n  submit(values) {\n    if (!this.form.valid) {\n      this.isSubmitted = true;\n      return false;\n    } else {\n      this.isSubmitted = false;\n      const brand = this.brands.find(x => x.id == +this.form.controls.brands.value);\n      const hero = {\n        name: this.form.controls.name.value,\n        alias: this.form.controls.alias.value,\n        brandId: brand?.id,\n        brandName: brand?.name\n      };\n      this.heroesService.createHero$.next(hero);\n    }\n    return true;\n  }\n  buttonClick() {\n    this.isSubmitted = !this.isSubmitted;\n  }\n}\nHeroComponent.ɵfac = function HeroComponent_Factory(t) {\n  return new (t || HeroComponent)();\n};\nHeroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HeroComponent,\n  selectors: [[\"app-hero\"]],\n  decls: 24,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\"], [\"style\", \"color: red\", 4, \"ngIf\"], [\"for\", \"alias\"], [\"id\", \"alias\", \"type\", \"text\", \"formControlName\", \"alias\"], [\"for\", \"brand\"], [\"id\", \"brand\", \"formControlName\", \"brands\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [2, \"color\", \"red\"], [3, \"ngValue\"]],\n  template: function HeroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function HeroComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit(ctx.form.value);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementStart(5, \"div\");\n      i0.ɵɵtemplate(6, HeroComponent_span_6_Template, 2, 0, \"span\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 5);\n      i0.ɵɵtext(9, \"Alias: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 6);\n      i0.ɵɵelementStart(11, \"div\");\n      i0.ɵɵtemplate(12, HeroComponent_span_12_Template, 2, 0, \"span\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"label\", 7);\n      i0.ɵɵtext(15, \"Brand\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"select\", 8);\n      i0.ɵɵelement(17, \"option\");\n      i0.ɵɵtemplate(18, HeroComponent_option_18_Template, 2, 2, \"option\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\");\n      i0.ɵɵtemplate(20, HeroComponent_span_20_Template, 2, 0, \"span\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\")(22, \"button\");\n      i0.ɵɵtext(23, \"Create\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.form.controls.name.errors == null ? null : ctx.form.controls.name.errors.required) && ctx.isSubmitted);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.form.controls.alias.errors == null ? null : ctx.form.controls.alias.errors.required) && ctx.isSubmitted);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brands)(\"ngForTrackBy\", ctx.trackByBrandId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", (ctx.form.controls.brands.errors == null ? null : ctx.form.controls.brands.errors.required) && ctx.isSubmitted);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["inject","FormBuilder","Validators","HeroesService","i0","HeroComponent","constructor","id","name","fb","group","required","alias","brands","trackByBrandId","index","item","submit","values","form","valid","isSubmitted","brand","find","x","controls","value","hero","brandId","brandName","heroesService","createHero$","next","buttonClick","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.ts","C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport { Brands } from '../shared/models/brand.model';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.css'],\n})\nexport class HeroComponent {\n  fb = inject(FormBuilder);\n  heroesService = inject(HeroesService);\n\n  isSubmitted: boolean = false;\n\n  brands: Brands[] = [\n    { id: 1, name: 'DC' },\n    { id: 2, name: 'Marvel' },\n  ];\n\n  form = this.fb.group({\n    name: ['', Validators.required],\n    alias: ['', Validators.required],\n    brands: ['', Validators.required],\n  });\n\n  trackByBrandId(index: any, item: Brands) {\n    return item.id;\n  }\n\n  submit(values: any) {\n    if (!this.form.valid) {\n      this.isSubmitted = true;\n      return false;\n    } else {\n      this.isSubmitted = false;\n      const brand = this.brands.find(\n        (x) => x.id == +this.form.controls.brands.value!\n      );\n\n      const hero = {\n        name: this.form.controls.name.value,\n        alias: this.form.controls.alias.value,\n        brandId: brand?.id,\n        brandName: brand?.name,\n      };\n\n      this.heroesService.createHero$.next(hero);\n    }\n    return true;\n  }\n\n  buttonClick() {\n    this.isSubmitted = !this.isSubmitted;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name: </label>\n    <input id=\"name\" type=\"text\" formControlName=\"name\" />\n    <!-- <div>\n    <span\n      style=\"color: red\"\n      *ngIf=\"\n        (form.controls.name.invalid && form.controls.name.touched) ||\n        (form.controls.name.untouched && isSubmitted)\n      \"\n    >\n      Name is required\n    </span>\n  </div> -->\n    <div>\n      <span\n        style=\"color: red\"\n        *ngIf=\"form.controls.name.errors?.required && isSubmitted\"\n      >\n        Name is required\n      </span>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"alias\">Alias: </label>\n    <input id=\"alias\" type=\"text\" formControlName=\"alias\" />\n    <div>\n      <span\n        style=\"color: red\"\n        *ngIf=\"form.controls.alias.errors?.required && isSubmitted\"\n      >\n        Alias is required\n      </span>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"brand\">Brand</label>\n\n    <select id=\"brand\" formControlName=\"brands\">\n      <option></option>\n      <option\n        *ngFor=\"let brand of brands; trackBy: trackByBrandId\"\n        [ngValue]=\"brand.id\"\n      >\n        {{ brand.name }}\n      </option>\n    </select>\n    <div>\n      <span\n        style=\"color: red\"\n        *ngIf=\"form.controls.brands.errors?.required && isSubmitted\"\n      >\n        Brand is required\n      </span>\n    </div>\n  </div>\n  <div>\n    <button>Create</button>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}