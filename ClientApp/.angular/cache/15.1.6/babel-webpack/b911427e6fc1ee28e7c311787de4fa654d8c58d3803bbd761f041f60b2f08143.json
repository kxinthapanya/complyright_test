{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction HeroComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const brand_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", brand_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", brand_r2.name, \" \");\n  }\n}\nfunction HeroComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Not Valid \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class HeroComponent {\n  constructor() {\n    this.fb = inject(FormBuilder);\n    this.heroesService = inject(HeroesService);\n    this.isSubmitted = false;\n    this.brands = [{\n      id: 1,\n      name: 'DC'\n    }, {\n      id: 2,\n      name: 'Marvel'\n    }];\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      alias: ['', Validators.required],\n      brands: ['', Validators.required]\n    });\n  }\n  trackByBrandId(index, item) {\n    return item.id;\n  }\n  submit(values) {\n    if (!this.form.valid) {\n      return false;\n    } else {\n      const brand = this.brands.find(x => x.id == +this.form.controls.brands.value);\n      const hero = {\n        name: this.form.controls.name.value,\n        alias: this.form.controls.alias.value,\n        brandId: brand?.id,\n        brandName: brand?.name\n      };\n      this.heroesService.createHero$.next(hero);\n    }\n    return true;\n  }\n  buttonClick() {\n    this.isSubmitted = !this.isSubmitted;\n    console.log('Button Click', this.isSubmitted);\n  }\n}\nHeroComponent.ɵfac = function HeroComponent_Factory(t) {\n  return new (t || HeroComponent)();\n};\nHeroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HeroComponent,\n  selectors: [[\"app-hero\"]],\n  decls: 16,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\"], [\"for\", \"alias\"], [\"id\", \"alias\", \"type\", \"text\", \"formControlName\", \"alias\"], [\"for\", \"heroes\"], [\"formControlName\", \"brands\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [3, \"click\"], [3, \"ngValue\"]],\n  template: function HeroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function HeroComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit(ctx.form.value);\n      });\n      i0.ɵɵelementStart(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵelementStart(4, \"label\", 3);\n      i0.ɵɵtext(5, \"Alias: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementStart(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Heroes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"select\", 6);\n      i0.ɵɵelement(10, \"option\");\n      i0.ɵɵtemplate(11, HeroComponent_option_11_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, HeroComponent_span_12_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementStart(13, \"div\")(14, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function HeroComponent_Template_button_click_14_listener() {\n        return ctx.buttonClick();\n      });\n      i0.ɵɵtext(15, \"Create\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brands)(\"ngForTrackBy\", ctx.trackByBrandId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls.name.invalid && ctx.form.controls.name.touched || ctx.form.controls.name.untouched);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,MAAM,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AACxD,SAASC,aAAa,QAAQ,mCAAmC;;;;;;ICO7DC,kCAGC;IACCA,YACF;IAAAA,iBAAS;;;;IAHPA,qCAAoB;IAEpBA,eACF;IADEA,8CACF;;;;;IAEFA,4BAKC;IACCA,2BACF;IAAAA,iBAAO;;;ADbT,OAAM,MAAOC,aAAa;EAL1BC;IAME,OAAE,GAAGN,MAAM,CAACC,WAAW,CAAC;IACxB,kBAAa,GAAGD,MAAM,CAACG,aAAa,CAAC;IAErC,gBAAW,GAAY,KAAK;IAE5B,WAAM,GAAa,CACjB;MAAEI,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAI,CAAE,EACrB;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAE,CAC1B;IAED,SAAI,GAAG,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC;MACnBF,IAAI,EAAE,CAAC,EAAE,EAAEN,UAAU,CAACS,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAChCE,MAAM,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ;KACjC,CAAC;;EAEFG,cAAc,CAACC,KAAU,EAAEC,IAAY;IACrC,OAAOA,IAAI,CAACT,EAAE;EAChB;EAEAU,MAAM,CAACC,MAAW;IAChB,IAAI,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,EAAE;MACpB,OAAO,KAAK;KACb,MAAM;MACL,MAAMC,KAAK,GAAG,IAAI,CAACR,MAAM,CAACS,IAAI,CAC3BC,CAAC,IAAKA,CAAC,CAAChB,EAAE,IAAI,CAAC,IAAI,CAACY,IAAI,CAACK,QAAQ,CAACX,MAAM,CAACY,KAAM,CACjD;MAED,MAAMC,IAAI,GAAG;QACXlB,IAAI,EAAE,IAAI,CAACW,IAAI,CAACK,QAAQ,CAAChB,IAAI,CAACiB,KAAK;QACnCb,KAAK,EAAE,IAAI,CAACO,IAAI,CAACK,QAAQ,CAACZ,KAAK,CAACa,KAAK;QACrCE,OAAO,EAAEN,KAAK,EAAEd,EAAE;QAClBqB,SAAS,EAAEP,KAAK,EAAEb;OACnB;MAED,IAAI,CAACqB,aAAa,CAACC,WAAW,CAACC,IAAI,CAACL,IAAI,CAAC;;IAE3C,OAAO,IAAI;EACb;EAEAM,WAAW;IACT,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;IACpCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACF,WAAW,CAAC;EAC/C;;AA5CW5B,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAA+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV1BpC,+BAAyD;MAAhCA;QAAA,OAAYqC,0BAAkB;MAAA,EAAC;MACtDrC,gCAAkB;MAAAA,sBAAM;MAAAA,iBAAQ;MAChCA,2BAAsD;MACtDA,gCAAmB;MAAAA,uBAAO;MAAAA,iBAAQ;MAClCA,2BAAwD;MACxDA,gCAAoB;MAAAA,sBAAM;MAAAA,iBAAQ;MAElCA,iCAAiC;MAC/BA,0BAAiB;MACjBA,sEAKS;MACXA,iBAAS;MACTA,kEAOO;MACPA,4BAAK;MAEKA;QAAA,OAASqC,iBAAa;MAAA,EAAC;MAACrC,uBAAM;MAAAA,iBAAS;;;MA1B7CA,oCAAkB;MAUAA,gBAAW;MAAXA,oCAAW;MAO9BA,eAIL;MAJKA,2HAIL","names":["inject","FormBuilder","Validators","HeroesService","i0","HeroComponent","constructor","id","name","fb","group","required","alias","brands","trackByBrandId","index","item","submit","values","form","valid","brand","find","x","controls","value","hero","brandId","brandName","heroesService","createHero$","next","buttonClick","isSubmitted","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.ts","C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport { Brands } from '../shared/models/brand.model';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.css'],\n})\nexport class HeroComponent {\n  fb = inject(FormBuilder);\n  heroesService = inject(HeroesService);\n\n  isSubmitted: boolean = false;\n\n  brands: Brands[] = [\n    { id: 1, name: 'DC' },\n    { id: 2, name: 'Marvel' },\n  ];\n\n  form = this.fb.group({\n    name: ['', Validators.required],\n    alias: ['', Validators.required],\n    brands: ['', Validators.required],\n  });\n\n  trackByBrandId(index: any, item: Brands) {\n    return item.id;\n  }\n\n  submit(values: any) {\n    if (!this.form.valid) {\n      return false;\n    } else {\n      const brand = this.brands.find(\n        (x) => x.id == +this.form.controls.brands.value!\n      );\n\n      const hero = {\n        name: this.form.controls.name.value,\n        alias: this.form.controls.alias.value,\n        brandId: brand?.id,\n        brandName: brand?.name,\n      };\n\n      this.heroesService.createHero$.next(hero);\n    }\n    return true;\n  }\n\n  buttonClick() {\n    this.isSubmitted = !this.isSubmitted;\n    console.log('Button Click', this.isSubmitted);\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n  <label for=\"name\">Name: </label>\n  <input id=\"name\" type=\"text\" formControlName=\"name\" />\n  <label for=\"alias\">Alias: </label>\n  <input id=\"alias\" type=\"text\" formControlName=\"alias\" />\n  <label for=\"heroes\">Heroes</label>\n\n  <select formControlName=\"brands\">\n    <option></option>\n    <option\n      *ngFor=\"let brand of brands; trackBy: trackByBrandId\"\n      [ngValue]=\"brand.id\"\n    >\n      {{ brand.name }}\n    </option>\n  </select>\n  <span\n    *ngIf=\"\n      (form.controls.name.invalid && form.controls.name.touched) ||\n      form.controls.name.untouched\n    \"\n  >\n    Not Valid\n  </span>\n  <div>\n    <!-- <button [disabled]=\"!form.valid || !form.dirty\">Create</button> -->\n    <button (click)=\"buttonClick()\">Create</button>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}