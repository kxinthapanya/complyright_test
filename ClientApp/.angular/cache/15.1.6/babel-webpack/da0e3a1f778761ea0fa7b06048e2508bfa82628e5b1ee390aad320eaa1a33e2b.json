{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction HeroComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const brand_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", brand_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", brand_r1.name, \" \");\n  }\n}\nexport class HeroComponent {\n  constructor() {\n    this.fb = inject(FormBuilder);\n    this.heroesService = inject(HeroesService);\n    this.brands = [{\n      id: 1,\n      name: 'DC'\n    }, {\n      id: 2,\n      name: 'Marvel'\n    }];\n    this.heroForm = this.fb.group({\n      name: ['', Validators.required],\n      alias: ['', Validators.required],\n      brands: this.fb.group({\n        id: [''],\n        name: ['']\n      })\n    });\n  }\n  trackByBrandId(index, item) {\n    return item.id;\n  }\n  submit(values) {\n    console.log('values', values);\n    const hero = {\n      name: this.heroForm.controls.name.value,\n      alias: this.heroForm.controls.alias.value,\n      brandId: this.heroForm.controls.brands.controls.id.value,\n      brandName: this.heroForm.controls.brands.controls.id.value\n    };\n    console.log('hero', hero);\n    this.heroesService.createHero$.next(values);\n  }\n}\nHeroComponent.ɵfac = function HeroComponent_Factory(t) {\n  return new (t || HeroComponent)();\n};\nHeroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HeroComponent,\n  selectors: [[\"app-hero\"]],\n  decls: 17,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\"], [\"for\", \"alias\"], [\"id\", \"alias\", \"type\", \"text\", \"formControlName\", \"alias\"], [\"for\", \"heroes\"], [\"formGroupName\", \"brands\"], [\"formControlName\", \"brands\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"disabled\"], [3, \"ngValue\"]],\n  template: function HeroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function HeroComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit(ctx.heroForm.value);\n      });\n      i0.ɵɵelementStart(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵelementStart(4, \"label\", 3);\n      i0.ɵɵtext(5, \"Alias: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementStart(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Heroes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 6)(10, \"select\", 7);\n      i0.ɵɵelement(11, \"option\");\n      i0.ɵɵtemplate(12, HeroComponent_option_12_Template, 2, 2, \"option\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\")(14, \"button\", 9);\n      i0.ɵɵtext(15, \"Create\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.heroForm);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brands)(\"ngForTrackBy\", ctx.trackByBrandId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.heroForm.valid || !ctx.heroForm.dirty);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.heroForm.valid, \" \");\n    }\n  },\n  dependencies: [i1.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,MAAM,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AACxD,SAASC,aAAa,QAAQ,mCAAmC;;;;;;ICO3DC,kCAGC;IACCA,YACF;IAAAA,iBAAS;;;;IAHPA,kCAAiB;IAEjBA,eACF;IADEA,8CACF;;;ADJN,OAAM,MAAOC,aAAa;EAL1BC;IAME,OAAE,GAAGN,MAAM,CAACC,WAAW,CAAC;IACxB,kBAAa,GAAGD,MAAM,CAACG,aAAa,CAAC;IAErC,WAAM,GAAa,CACjB;MAAEI,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAI,CAAE,EACrB;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAE,CAC1B;IAED,aAAQ,GAAG,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC;MACvBF,IAAI,EAAE,CAAC,EAAE,EAAEN,UAAU,CAACS,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAChCE,MAAM,EAAE,IAAI,CAACJ,EAAE,CAACC,KAAK,CAAC;QACpBH,EAAE,EAAE,CAAC,EAAE,CAAC;QACRC,IAAI,EAAE,CAAC,EAAE;OACV;KACF,CAAC;;EAEFM,cAAc,CAACC,KAAU,EAAEC,IAAY;IACrC,OAAOA,IAAI,CAACT,EAAE;EAChB;EAEAU,MAAM,CAACC,MAAW;IAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;IAC7B,MAAMG,IAAI,GAAG;MACXb,IAAI,EAAE,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACf,IAAI,CAACgB,KAAK;MACvCZ,KAAK,EAAE,IAAI,CAACU,QAAQ,CAACC,QAAQ,CAACX,KAAK,CAACY,KAAK;MACzCC,OAAO,EAAE,IAAI,CAACH,QAAQ,CAACC,QAAQ,CAACV,MAAM,CAACU,QAAQ,CAAChB,EAAE,CAACiB,KAAK;MACxDE,SAAS,EAAE,IAAI,CAACJ,QAAQ,CAACC,QAAQ,CAACV,MAAM,CAACU,QAAQ,CAAChB,EAAE,CAACiB;KACtD;IACDL,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEC,IAAI,CAAC;IACzB,IAAI,CAACM,aAAa,CAACC,WAAW,CAACC,IAAI,CAACX,MAAM,CAAC;EAC7C;;AAhCWb,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV1B9B,+BAAiE;MAApCA;QAAA,OAAY+B,8BAAsB;MAAA,EAAC;MAC9D/B,gCAAkB;MAAAA,sBAAM;MAAAA,iBAAQ;MAChCA,2BAAsD;MACtDA,gCAAmB;MAAAA,uBAAO;MAAAA,iBAAQ;MAClCA,2BAAwD;MACxDA,gCAAoB;MAAAA,sBAAM;MAAAA,iBAAQ;MAClCA,8BAA4B;MAExBA,0BAAiB;MACjBA,sEAKS;MACXA,iBAAS;MAEXA,4BAAK;MACqDA,uBAAM;MAAAA,iBAAS;MACvEA,aACF;MAAAA,iBAAM;;;MApBFA,wCAAsB;MAUFA,gBAAW;MAAXA,oCAAW;MAQzBA,eAA+C;MAA/CA,qEAA+C;MACvDA,eACF;MADEA,mDACF","names":["inject","FormBuilder","Validators","HeroesService","i0","HeroComponent","constructor","id","name","fb","group","required","alias","brands","trackByBrandId","index","item","submit","values","console","log","hero","heroForm","controls","value","brandId","brandName","heroesService","createHero$","next","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.ts","C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport { Brands } from '../shared/models/brand.model';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.css'],\n})\nexport class HeroComponent {\n  fb = inject(FormBuilder);\n  heroesService = inject(HeroesService);\n\n  brands: Brands[] = [\n    { id: 1, name: 'DC' },\n    { id: 2, name: 'Marvel' },\n  ];\n\n  heroForm = this.fb.group({\n    name: ['', Validators.required],\n    alias: ['', Validators.required],\n    brands: this.fb.group({\n      id: [''],\n      name: [''],\n    }),\n  });\n\n  trackByBrandId(index: any, item: Brands) {\n    return item.id;\n  }\n\n  submit(values: any) {\n    console.log('values', values);\n    const hero = {\n      name: this.heroForm.controls.name.value,\n      alias: this.heroForm.controls.alias.value,\n      brandId: this.heroForm.controls.brands.controls.id.value,\n      brandName: this.heroForm.controls.brands.controls.id.value,\n    };\n    console.log('hero', hero);\n    this.heroesService.createHero$.next(values);\n  }\n}\n","<form [formGroup]=\"heroForm\" (ngSubmit)=\"submit(heroForm.value)\">\n  <label for=\"name\">Name: </label>\n  <input id=\"name\" type=\"text\" formControlName=\"name\" />\n  <label for=\"alias\">Alias: </label>\n  <input id=\"alias\" type=\"text\" formControlName=\"alias\" />\n  <label for=\"heroes\">Heroes</label>\n  <div formGroupName=\"brands\">\n    <select formControlName=\"brands\">\n      <option></option>\n      <option\n        *ngFor=\"let brand of brands; trackBy: trackByBrandId\"\n        [ngValue]=\"brand\"\n      >\n        {{ brand.name }}\n      </option>\n    </select>\n  </div>\n  <div>\n    <button [disabled]=\"!heroForm.valid || !heroForm.dirty\">Create</button>\n    {{ heroForm.valid }}\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}