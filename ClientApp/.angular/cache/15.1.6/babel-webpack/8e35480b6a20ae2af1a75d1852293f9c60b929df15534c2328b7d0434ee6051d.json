{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction HeroComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Not Valid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HeroComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const brand_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", brand_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", brand_r2.name, \" \");\n  }\n}\nexport class HeroComponent {\n  constructor() {\n    this.fb = inject(FormBuilder);\n    this.heroesService = inject(HeroesService);\n    this.brands = [{\n      id: 1,\n      name: 'DC'\n    }, {\n      id: 2,\n      name: 'Marvel'\n    }];\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      alias: ['', Validators.required],\n      brands: ['', Validators.required]\n    });\n  }\n  trackByBrandId(index, item) {\n    return item.id;\n  }\n  submit(values) {\n    const brand = this.brands.find(x => x.id == +this.form.controls.brands.value);\n    const hero = {\n      name: this.form.controls.name.value,\n      alias: this.form.controls.alias.value,\n      brandId: brand?.id,\n      brandName: brand?.name\n    };\n    this.heroesService.createHero$.next(hero);\n  }\n}\nHeroComponent.ɵfac = function HeroComponent_Factory(t) {\n  return new (t || HeroComponent)();\n};\nHeroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HeroComponent,\n  selectors: [[\"app-hero\"]],\n  decls: 16,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\"], [4, \"ngIf\"], [\"for\", \"alias\"], [\"id\", \"alias\", \"type\", \"text\", \"formControlName\", \"alias\"], [\"for\", \"heroes\"], [\"formControlName\", \"brands\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngValue\"]],\n  template: function HeroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function HeroComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit(ctx.form.value);\n      });\n      i0.ɵɵelementStart(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵtemplate(4, HeroComponent_span_4_Template, 2, 0, \"span\", 3);\n      i0.ɵɵelementStart(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Alias: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementStart(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Heroes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"select\", 7);\n      i0.ɵɵelement(11, \"option\");\n      i0.ɵɵtemplate(12, HeroComponent_option_12_Template, 2, 2, \"option\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"button\");\n      i0.ɵɵtext(15, \"Create\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls.name.invalid && ctx.form.controls.name.touched || ctx.form.controls.name.untouched);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brands)(\"ngForTrackBy\", ctx.trackByBrandId);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,MAAM,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AACxD,SAASC,aAAa,QAAQ,mCAAmC;;;;;;ICE/DC,4BAKC;IACCA,2BACF;IAAAA,iBAAO;;;;;IAQLA,iCAGC;IACCA,YACF;IAAAA,iBAAS;;;;IAHPA,qCAAoB;IAEpBA,eACF;IADEA,8CACF;;;ADdJ,OAAM,MAAOC,aAAa;EAL1BC;IAME,OAAE,GAAGN,MAAM,CAACC,WAAW,CAAC;IACxB,kBAAa,GAAGD,MAAM,CAACG,aAAa,CAAC;IAErC,WAAM,GAAa,CACjB;MAAEI,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAI,CAAE,EACrB;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAE,CAC1B;IAED,SAAI,GAAG,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC;MACnBF,IAAI,EAAE,CAAC,EAAE,EAAEN,UAAU,CAACS,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAChCE,MAAM,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ;KACjC,CAAC;;EAEFG,cAAc,CAACC,KAAU,EAAEC,IAAY;IACrC,OAAOA,IAAI,CAACT,EAAE;EAChB;EAEAU,MAAM,CAACC,MAAW;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACN,MAAM,CAACO,IAAI,CAC3BC,CAAC,IAAKA,CAAC,CAACd,EAAE,IAAI,CAAC,IAAI,CAACe,IAAI,CAACC,QAAQ,CAACV,MAAM,CAACW,KAAM,CACjD;IAED,MAAMC,IAAI,GAAG;MACXjB,IAAI,EAAE,IAAI,CAACc,IAAI,CAACC,QAAQ,CAACf,IAAI,CAACgB,KAAK;MACnCZ,KAAK,EAAE,IAAI,CAACU,IAAI,CAACC,QAAQ,CAACX,KAAK,CAACY,KAAK;MACrCE,OAAO,EAAEP,KAAK,EAAEZ,EAAE;MAClBoB,SAAS,EAAER,KAAK,EAAEX;KACnB;IAED,IAAI,CAACoB,aAAa,CAACC,WAAW,CAACC,IAAI,CAACL,IAAI,CAAC;EAC3C;;AAhCWpB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV1B/B,+BAAyD;MAAhCA;QAAA,OAAYgC,0BAAkB;MAAA,EAAC;MACtDhC,gCAAkB;MAAAA,sBAAM;MAAAA,iBAAQ;MAChCA,2BAAsD;MAEtDA,gEAOO;MAEPA,gCAAmB;MAAAA,uBAAO;MAAAA,iBAAQ;MAClCA,2BAAwD;MACxDA,gCAAoB;MAAAA,sBAAM;MAAAA,iBAAQ;MAElCA,kCAAiC;MAC/BA,0BAAiB;MACjBA,sEAKS;MACXA,iBAAS;MAETA,4BAAK;MAEKA,uBAAM;MAAAA,iBAAS;;;MA7BrBA,oCAAkB;MAKnBA,eAIL;MAJKA,2HAIL;MAWwBA,eAAW;MAAXA,oCAAW","names":["inject","FormBuilder","Validators","HeroesService","i0","HeroComponent","constructor","id","name","fb","group","required","alias","brands","trackByBrandId","index","item","submit","values","brand","find","x","form","controls","value","hero","brandId","brandName","heroesService","createHero$","next","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.ts","C:\\work\\complyrights\\HeroTest\\ClientApp\\src\\app\\hero\\hero.component.html"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HeroesService } from '../shared/services/heroes.service';\nimport { Brands } from '../shared/models/brand.model';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.css'],\n})\nexport class HeroComponent {\n  fb = inject(FormBuilder);\n  heroesService = inject(HeroesService);\n\n  brands: Brands[] = [\n    { id: 1, name: 'DC' },\n    { id: 2, name: 'Marvel' },\n  ];\n\n  form = this.fb.group({\n    name: ['', Validators.required],\n    alias: ['', Validators.required],\n    brands: ['', Validators.required],\n  });\n\n  trackByBrandId(index: any, item: Brands) {\n    return item.id;\n  }\n\n  submit(values: any) {\n    const brand = this.brands.find(\n      (x) => x.id == +this.form.controls.brands.value!\n    );\n\n    const hero = {\n      name: this.form.controls.name.value,\n      alias: this.form.controls.alias.value,\n      brandId: brand?.id,\n      brandName: brand?.name,\n    };\n\n    this.heroesService.createHero$.next(hero);\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\n  <label for=\"name\">Name: </label>\n  <input id=\"name\" type=\"text\" formControlName=\"name\" />\n\n  <span\n    *ngIf=\"\n      (form.controls.name.invalid && form.controls.name.touched) ||\n      form.controls.name.untouched\n    \"\n  >\n    Not Valid\n  </span>\n\n  <label for=\"alias\">Alias: </label>\n  <input id=\"alias\" type=\"text\" formControlName=\"alias\" />\n  <label for=\"heroes\">Heroes</label>\n  <!-- <div formGroupName=\"brands\"> -->\n  <select formControlName=\"brands\">\n    <option></option>\n    <option\n      *ngFor=\"let brand of brands; trackBy: trackByBrandId\"\n      [ngValue]=\"brand.id\"\n    >\n      {{ brand.name }}\n    </option>\n  </select>\n  <!-- </div> -->\n  <div>\n    <!-- <button [disabled]=\"!form.valid || !form.dirty\">Create</button> -->\n    <button>Create</button>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}